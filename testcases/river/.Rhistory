plot.profiles(sebas.D,limits=T,.main='median particle size')
#par(mfrow=c(1,2))
plot.profiles((sebas.c$bb470),limits=F,.main='b470 as proxy of Cphyto')
plot.profiles(sebas.c$gamma.r,limits=F,.main='r2')
plot(sebas.c$time,sebas.c$press, col=sebas.c$col)
par(mfrow=c(1,1))
plot(sebas.c$bb470,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
plot(sebas.c$chla/max(sebas.c$chla),sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(.01,1))
lines(supsmu(sebas.c$chla/max(sebas.c$chla),sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(1,10))
lines(supsmu(sebas.c$cdom,sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r))
plot(sebas.D,sebas.c$bb700,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),xlim=c(1,100))
lines(supsmu(sebas.D,sebas.c$bb700,w=sebas.c$gamma.r))
plot(sebas.c$chla/sebas.c$bb700,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
lines(smooth.spline(sebas.c$chla/sebas.c$bb700,spar=0.001))
range(yday(sebas$time))
#
sebas$time = as.POSIXct(sebas$time,origin='1970-01-01')
sebas$log.chla = log(sebas$chla)
sebas = sebas[complete.cases(sebas),]
range(yday(sebas$time))
sebas = data.frame(
time = ncvar_get(nc_data, "time"),
temp =  ncvar_get(nc_data, "temp"),
bb470 = ncvar_get(nc_data, "bb470"),
bb532 = ncvar_get(nc_data, "bb532"),
bb660 = ncvar_get(nc_data, "bb660"),
bb700 = ncvar_get(nc_data, "bb"),
chla = ncvar_get(nc_data, "chlor"),
cdom = ncvar_get(nc_data, "cdom"),
cond = ncvar_get(nc_data, "cond"),
press = ncvar_get(nc_data, "press")
)
sebas.depth = data.frame(
time = ncvar_get(nc_data, "depth/time"),
depth =ncvar_get(nc_data, "depth/depth"),
bottom=ncvar_get(nc_data, "depth/water_depth")
)
#
sebas$time = as.POSIXct(sebas$time,origin='1970-01-01')
sebas$log.chla = log(sebas$chla)
sebas = sebas[complete.cases(sebas),]
range(yday(sebas$time))
source("~/backscatter.R", echo=TRUE)
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
par(mfrow=c(1,2))
x = prcomp(data, scale. = TRUE)
biplot(x,choices=c(1,2),xlabs=c('.','+')[as.numeric(data0$dino)+1],#rep("+",length(x$x[,1])),
cex=c(2,1),
xlab='principal component 1',
ylab='principal component 2')
x = prcomp(sebas, scale. = TRUE)
biplot(x,choices=c(1,2),xlabs=rep(".",length(x$x[,1])),
cex=c(2,1),
xlab='principal component 1',
ylab='principal component 2')
plot(x)
summary(x)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
pi = abs(c(NA,diff(wss))/wss)
plot(1:nc,pi/max(pi,na.rm=T),col='red',type='b',lwd=2,pch=2)
plot(1:nc,wss,col='red',type='b',lwd=2,pch=2)
}
n.clust=4
wssplot(sebas1<-subset(sebas,select=c(bb470,bb532,bb660,bb700,chla,cdom)), nc=15)
cc=kmeans(scale(sebas1),n.clust, nstart = 25)
sebas.c = sebas0
sebas.c$col = cc$cluster
palette(hcl.colors(n.clust,palette='Zi',alpha = 0.5))
plot(sebas.c$time,sebas.c$depth,col=sebas.c$col,pch=16,cex=1.,lwd=NA)
summary(sebas.c$col)
par(mfrow=c(2,2))
for(i in 1:n.clust) plot(depth~yday(time),data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
for(i in 1:n.clust) plot(depth~time,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
plot(chla~cdom,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(chla~cdom,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,lwd=NA)
my.for = depth~temp
plot(my.for,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(my.for,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,lwd=NA)
####
#HYERARCHICAL CLUSTERING
"
n.clust = 4
clusters <- hclust(dist(scale(sebas)),method ='ward.D2' )
plot(clusters)
sebas.c$col2 <- cutree(clusters, n.clust)
plot(sebas.c$time,sebas.c$depth,col=sebas.c$col2,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
my.for = depth~temp
plot(my.for,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(my.for,data=sebas.c[sebas.c$col2==i,],col=i,pch=16,cex=1.,lwd=NA)
"
####
#SPECTRAL COEFICIENT ANALYSIS
palette()
sebas.c$gamma = NA + 0*sebas.c$temp
sebas.c$gamma.r = NA + 0*sebas.c$temp
plot(1,type='n',xlim=c(450,700),ylim=c(2e-4,2e-2),log='xy')
for(i in 1:length(sebas.c$gamma)){
print(i)
spec = c(sebas.c$bb470[i],sebas.c$bb532[i],sebas.c$bb660[i])
if(any(is.infinite( log(spec)))) next
s=summary(lm(log(spec)~log(c(470,532,660))))
#s=summary(lm(log(spec)~log(c(470,532,660,700))))
sebas.c$gamma[i]=-s$coefficients[2,1]/3
sebas.c$gamma.r[i] = s$coefficients[2,2]/3#s$coefficients[2,4]#s$r.squared
#sebas.c$gamma.r[i] =s$r.squared
#if(i%%100==0)lines(spec~c(470,532,660,700),col=i%%15+1)
if(i%%500==0)lines(spec~c(470,532,660),col=i/10+1,type='o',lwd=2)
}
sebas.c$gamma[sebas.c$gamma<0] = NA
sebas.c$gamma[sebas.c$gamma>1] = NA
par(mfrow=c(3,4))
#plot(sebas.c$time,sebas.c$depth,col=sebas.c$col,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
sebas$gamma = sebas.c$gamma
plot.profiles(sebas.c$cond,limits=T,the.pal='Lajolla',.main='conductivity')
plot.profiles(sebas.c$temp,limits=T,the.pal='Spec',the.rev=T,.main='temperature')
#plot.profiles(sebas.c$cdom,limits=T,the.pal='Lajoll',the.rev=F)
plot.profiles(sebas.c$chla,limits = T,the.pal='Mint',the.rev = T,.main='chlorophyll')
sebas.D =( sebas.c$gamma-.998993)/-0.014 #Fig10 Slade2015
plot.profiles(sebas.D,limits=T,.main='median particle size')
#par(mfrow=c(1,2))
plot.profiles((sebas.c$bb470),limits=F,.main='b470 as proxy of Cphyto')
plot.profiles(sebas.c$gamma.r,limits=F,.main='r2')
plot(sebas.c$time,sebas.c$press, col=sebas.c$col)
par(mfrow=c(1,1))
plot(sebas.c$bb470,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
plot(sebas.c$chla/max(sebas.c$chla),sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(.01,1))
lines(supsmu(sebas.c$chla/max(sebas.c$chla),sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(1,10))
lines(supsmu(sebas.c$cdom,sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r))
plot(sebas.D,sebas.c$bb700,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),xlim=c(1,100))
lines(supsmu(sebas.D,sebas.c$bb700,w=sebas.c$gamma.r))
plot(sebas.c$chla/sebas.c$bb700,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
lines(smooth.spline(sebas.c$chla/sebas.c$bb700,spar=0.001))
source("~/backscatter.R", echo=TRUE)
source("~/backscatter.R", echo=TRUE)
par(mfrow=c(2,2),las=1)
plot.profiles=function(y, limits=NA,the.pal = 'viri',the.rev=F,.main=NA){
#limits=c(14,22)
# y=sebas$temp
#limits=1
if(!is.na(limits)){
limits = quantile(y,na.rm=T,probs=c(0.01,0.99))
y[y>limits[2]]=limits[2]#0.5*(max(y,na.rm=T)+limits[2])
y[y<limits[1]]=limits[1]#0.5*(min(y,na.rm=T)+limits[1])
}
#plot(density(y,na.rm = T),log='',type='n',main='',xlab='value',ylab='')
#rect(par("usr")[1], par("usr")[3],
#     par("usr")[2], par("usr")[4],
#     col = "lightgray") # Color
if(!is.na(limits[1])){
#abline(v=limits,lty=2)
new.cuts = pretty(limits,n=20)
}  else{
new.cuts = quantile(y,na.rm = T,probs = 0.1 * 0:10)
}
palette(hcl.colors(length(new.cuts),palette=the.pal,alpha = 0.995,rev=the.rev))
x = as.integer(as.factor(cut(y, new.cuts)))
#abline(v=new.cuts,col=1:length(new.cuts),lwd=2)
graphics::hist(y,border='lightgray',breaks=length(new.cuts),col=1:length(new.cuts),add=F,freq=F,main=.main)
#rect(par("usr")[1], par("usr")[3],
#     par("usr")[2], par("usr")[4],
#     col = "lightgray") # Color
#lines(density(y,na.rm = T),log='',lwd=3)
points(limits,c(0,0),pch=8)
print(summary(x))
plot(super$time,super$depth,type='n',ylim=c(40,0),ylab='depth, m',xlab='')
rect(par("usr")[1], par("usr")[3],
par("usr")[2], par("usr")[4],
col = "lightgray") # Color
points(super$time,super$depth,col=x,pch=15,cex=.5,lwd=NA)
lines(sebas.depth$time,sebas.depth$bottom,type='l',col='white',lty=1)
#s=inter.2d(super$time,super$depth,x)
#image(s,ylim=c(40,0),col=hcl.colors(11))
#points(sebas$time, sebas$depth,col='white',pch=1,cex=.5)
#plot(sebas$time, sebas$depth,col=x,pch=19,ylim=c(40,0))
}
plot.profiles(sebas$chla,limits=1,the.pal='Batlow',the.rev=T)
plot.profiles(sebas$temp,limits=1,the.pal='spec',the.rev = T)
plot.profiles(sebas$bb700,limits=1,the.pal='reds',the.rev = T)
palette("default")
fdsa
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
par(mfrow=c(1,2))
x = prcomp(data, scale. = TRUE)
biplot(x,choices=c(1,2),xlabs=c('.','+')[as.numeric(data0$dino)+1],#rep("+",length(x$x[,1])),
cex=c(2,1),
xlab='principal component 1',
ylab='principal component 2')
x = prcomp(sebas, scale. = TRUE)
summary(x)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
pi = abs(c(NA,diff(wss))/wss)
plot(1:nc,pi/max(pi,na.rm=T),col='red',type='b',lwd=2,pch=2)
plot(1:nc,wss,col='red',type='b',lwd=2,pch=2)
}
n.clust=4
wssplot(sebas1<-subset(sebas,select=c(bb470,bb532,bb660,bb700,chla,cdom)), nc=15)
cc=kmeans(scale(sebas1),n.clust, nstart = 25)
sebas.c = sebas0
sebas.c$col = cc$cluster
palette(hcl.colors(n.clust,palette='Zi',alpha = 0.5))
plot(sebas.c$time,sebas.c$depth,col=sebas.c$col,pch=16,cex=1.,lwd=NA)
summary(sebas.c$col)
par(mfrow=c(2,2))
for(i in 1:n.clust) plot(depth~yday(time),data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
for(i in 1:n.clust) plot(depth~time,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
plot(chla~cdom,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(chla~cdom,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,lwd=NA)
my.for = depth~temp
plot(my.for,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(my.for,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,lwd=NA)
####
#SPECTRAL COEFICIENT ANALYSIS
palette()
sebas.c$gamma = NA + 0*sebas.c$temp
sebas.c$gamma.r = NA + 0*sebas.c$temp
plot(1,type='n',xlim=c(450,700),ylim=c(2e-4,2e-2),log='xy')
for(i in 1:length(sebas.c$gamma)){
print(i)
spec = c(sebas.c$bb470[i],sebas.c$bb532[i],sebas.c$bb660[i])
if(any(is.infinite( log(spec)))) next
s=summary(lm(log(spec)~log(c(470,532,660))))
#s=summary(lm(log(spec)~log(c(470,532,660,700))))
sebas.c$gamma[i]=-s$coefficients[2,1]/3
sebas.c$gamma.r[i] = s$coefficients[2,2]/3#s$coefficients[2,4]#s$r.squared
#sebas.c$gamma.r[i] =s$r.squared
#if(i%%100==0)lines(spec~c(470,532,660,700),col=i%%15+1)
if(i%%500==0)lines(spec~c(470,532,660),col=i/10+1,type='o',lwd=2)
}
par(mfrow=c(1,1))
plot(sebas.c$bb470,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
plot(sebas.c$chla/max(sebas.c$chla),sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(.01,1))
lines(supsmu(sebas.c$chla/max(sebas.c$chla),sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(1,10))
lines(supsmu(sebas.c$cdom,sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r))
plot(sebas.D,sebas.c$bb700,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),xlim=c(1,100))
lines(supsmu(sebas.D,sebas.c$bb700,w=sebas.c$gamma.r))
plot(sebas.c$chla/sebas.c$bb700,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
lines(smooth.spline(sebas.c$chla/sebas.c$bb700,spar=0.001))
source("~/backscatter.R", echo=TRUE)
palette("default")
sebas0 = as.data.frame(sebas)
sebas = subset(sebas0,select=-c('time','temp','log.chla','q','cond'))
par(mfrow=c(1,2))
x = prcomp(data, scale. = TRUE)
biplot(x,choices=c(1,2),xlabs=c('.','+')[as.numeric(data0$dino)+1],#rep("+",length(x$x[,1])),
cex=c(2,1),
xlab='principal component 1',
ylab='principal component 2')
x = prcomp(sebas, scale. = TRUE)
biplot(x,choices=c(1,2),xlabs=rep(".",length(x$x[,1])),
cex=c(2,1),
xlab='principal component 1',
ylab='principal component 2')
plot(x)
summary(x)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
pi = abs(c(NA,diff(wss))/wss)
plot(1:nc,pi/max(pi,na.rm=T),col='red',type='b',lwd=2,pch=2)
plot(1:nc,wss,col='red',type='b',lwd=2,pch=2)
}
n.clust=4
wssplot(sebas1<-subset(sebas,select=c(bb470,bb532,bb660,bb700,chla,cdom)), nc=15)
cc=kmeans(scale(sebas1),n.clust, nstart = 25)
sebas.c = sebas0
sebas.c$col = cc$cluster
palette(hcl.colors(n.clust,palette='Zi',alpha = 0.5))
plot(sebas.c$time,sebas.c$depth,col=sebas.c$col,pch=16,cex=1.,lwd=NA)
summary(sebas.c$col)
par(mfrow=c(2,2))
for(i in 1:n.clust) plot(depth~yday(time),data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
for(i in 1:n.clust) plot(depth~time,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
plot(chla~cdom,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(chla~cdom,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,lwd=NA)
my.for = depth~temp
plot(my.for,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(my.for,data=sebas.c[sebas.c$col==i,],col=i,pch=16,cex=1.,lwd=NA)
####
#HYERARCHICAL CLUSTERING
"
n.clust = 4
clusters <- hclust(dist(scale(sebas)),method ='ward.D2' )
plot(clusters)
sebas.c$col2 <- cutree(clusters, n.clust)
plot(sebas.c$time,sebas.c$depth,col=sebas.c$col2,pch=16,cex=1.,ylim=c(40,0),lwd=NA)
my.for = depth~temp
plot(my.for,data=sebas.c,pch=16,cex=1.,lwd=NA,type='n')
for(i in 1:n.clust) points(my.for,data=sebas.c[sebas.c$col2==i,],col=i,pch=16,cex=1.,lwd=NA)
"
####
#SPECTRAL COEFICIENT ANALYSIS
palette()
sebas.c$gamma = NA + 0*sebas.c$temp
sebas.c$gamma.r = NA + 0*sebas.c$temp
plot(1,type='n',xlim=c(450,700),ylim=c(2e-4,2e-2),log='xy')
for(i in 1:length(sebas.c$gamma)){
print(i)
spec = c(sebas.c$bb470[i],sebas.c$bb532[i],sebas.c$bb660[i])
if(any(is.infinite( log(spec)))) next
s=summary(lm(log(spec)~log(c(470,532,660))))
#s=summary(lm(log(spec)~log(c(470,532,660,700))))
sebas.c$gamma[i]=-s$coefficients[2,1]/3
sebas.c$gamma.r[i] = s$coefficients[2,2]/3#s$coefficients[2,4]#s$r.squared
#sebas.c$gamma.r[i] =s$r.squared
#if(i%%100==0)lines(spec~c(470,532,660,700),col=i%%15+1)
if(i%%500==0)lines(spec~c(470,532,660),col=i/10+1,type='o',lwd=2)
}
plot(sebas.c$time,sebas.c$press, col=sebas.c$col)
par(mfrow=c(1,1))
plot(sebas.c$bb470,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
plot(sebas.c$chla/max(sebas.c$chla),sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(.01,1))
lines(supsmu(sebas.c$chla/max(sebas.c$chla),sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),ylim=c(1,100),xlim=c(1,10))
lines(supsmu(sebas.c$cdom,sebas.D,w=sebas.c$gamma.r))
plot(sebas.c$cdom,sebas.c$chla,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r))
plot(sebas.D,sebas.c$bb700,log='xy',pch=19,col=alpha('lightgray',0.01+sebas.c$gamma.r),xlim=c(1,100))
lines(supsmu(sebas.D,sebas.c$bb700,w=sebas.c$gamma.r))
plot(sebas.c$chla/sebas.c$bb700,sebas.D,log='xy',pch=19,col=alpha('lightgray',0.1+sebas.c$gamma.r))
lines(smooth.spline(sebas.c$chla/sebas.c$bb700,spar=0.001))
`Cuxhaven_DWD!Lufttemperatur` <- read.delim("~/tools/dobgcp-surface/testcase/estuary/data/Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
View(`Cuxhaven_DWD!Lufttemperatur`)
temp = read.delim("Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
setwd('~/tools/dobgcp-surface/testcase/estuary/data/')
temp = read.delim("Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
source("~/.active-rstudio-document", echo=TRUE)
(10/9)**w.exponent
w.exponent=0.14
(10/9)**w.exponent
merge(wind,dirw,by='V1')
setwd('~/tools/dobgcp-surface/testcase/estuary/data/')
temp = read.delim("Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
wind = read.delim("Cuxhaven_DWD!Windgeschwindigkeit", header=FALSE, comment.char="#")
dirw = read.delim("Cuxhaven_DWD!Windrichtung.txt", header=FALSE, comment.char="#")
## transforming temperatures at 9m above ground to 2 meter values
h.station = 9
h.model = 2
T.gradient=-0.0065
temp$V3 = temp$V2+(h.model-h.station)*T.gradient
## transforming wind speed at 9m above ground to 10 meter values
h.station = 9
h.model = 10
w.exponent=0.14
wind$V3=wind$V2*(h.model/h.station)**w.exponent
wind$V3=wind$V2*(h.model/h.station)**w.exponent
setwd('~/tools/dobgcp-surface/testcase/estuary/data/')
temp = read.delim("Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
wind = read.delim("Cuxhaven_DWD!Windgeschwindigkeit", header=FALSE, comment.char="#")
wind = read.delim("Cuxhaven_DWD!Windgeschwindigkeit.txt", header=FALSE, comment.char="#")
dirw = read.delim("Cuxhaven_DWD!Windrichtung.txt", header=FALSE, comment.char="#")
## transforming temperatures at 9m above ground to 2 meter values
h.station = 9
h.model = 2
T.gradient=-0.0065
temp$V3 = temp$V2+(h.model-h.station)*T.gradient
## transforming wind speed at 9m above ground to 10 meter values
h.station = 9
h.model = 10
w.exponent=0.14
wind$V3=wind$V2*(h.model/h.station)**w.exponent
merge(wind,dirw,by='V1')
source("~/.active-rstudio-document", echo=TRUE)
wind=merge(wind,dirw,by='V1')
as.Date.POSIXct(temp$V1)
temp$V1
as.Date.POSIXct(temp$V1,format='%Y-%m-%d %H:%m:%s')
as.POSIXct(temp$V1,format='%Y-%m-%d %H:%m:%s')
as.POSIXct(temp$V1)
setwd('~/tools/dobgcp-surface/testcase/estuary/data/')
temp = read.delim("Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
wind = read.delim("Cuxhaven_DWD!Windgeschwindigkeit.txt", header=FALSE, comment.char="#")
dirw = read.delim("Cuxhaven_DWD!Windrichtung.txt", header=FALSE, comment.char="#")
temp$V1=as.POSIXct(temp$V1)
wind$V1=as.POSIXct(wind$V1)
dirw$V1=as.POSIXct(dirw$V1)
## transforming temperatures at 9m above ground to 2 meter values
h.station = 9
h.model = 2
T.gradient=-0.0065
temp$V3 = temp$V2+(h.model-h.station)*T.gradient
## transforming wind speed at 9m above ground to 10 meter values
h.station = 9
h.model = 10
w.exponent=0.14
wind$V3=wind$V2*(h.model/h.station)**w.exponent
wind=merge(wind,dirw,by='V1')
setwd('~/tools/dobgcp-surface/testcase/estuary/data/')
temp = read.delim("Cuxhaven_DWD!Lufttemperatur.txt", header=FALSE, comment.char="#")
wind = read.delim("Cuxhaven_DWD!Windgeschwindigkeit.txt", header=FALSE, comment.char="#")
dirw = read.delim("Cuxhaven_DWD!Windrichtung.txt", header=FALSE, comment.char="#")
temp$V1=as.POSIXct(temp$V1)
wind$V1=as.POSIXct(wind$V1)
dirw$V1=as.POSIXct(dirw$V1)
View(dirw)
View(wind)
wind = merge(wind,dirw,by='V1')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
meteofile = merge(wind,temp)
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
View(meteofile)
year(meteofile$V1)
Get.Year = function(...) format(as.Date(..., format="%d/%m/%Y"),"%Y")
meteofile = subset(meteofile, Get.Year(meteofile$V1))
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
Get.Year(meteofile$V1)
meteofile = subset(meteofile, Get.Year(V1)>2004)
View(meteofile)
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
write.csv(meteofile,'meteofile.csv')
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
write.csv(meteofile,'meteofile.csv',row.names=F,sep=' ',quote=F)
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
meteofile$V1
meteofile$V1 + 1
meteofile$V1[1]
meteofile$V1[1] + 1
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
source("~/tools/dobgcp-surface/testcase/estuary/data/setup_data.R", echo=TRUE)
source("~/tools/dobgcp-surface/testcases/river/plot_output.R", echo=TRUE)
source("~/tools/dobgcp-surface/testcases/river/plot_output.R", echo=TRUE)
source("~/tools/dobgcp-surface/testcases/river/plot_output.R", echo=TRUE)
